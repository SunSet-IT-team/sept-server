generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  EXECUTOR
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum AccountStatus {
  UNVERIFIED
  VERIFIED
  DELETED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  
  role      Role     @default(CUSTOMER)
  
  verificationCode VerificationCode?
  
  status    AccountStatus @default(UNVERIFIED)
  statusUpdatedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  executorProfile ExecutorProfile?
  customerProfile CustomerProfile?
  adminProfile AdminProfile?

  ordersAsCustomer Order[]    @relation("CustomerOrders")
  ordersAsExecutor Order[]    @relation("ExecutorOrders")
  favorites        Favorite[] @relation("FavoriteCustomer")
  favoritedBy      Favorite[] @relation("FavoriteExecutor")

  declinedOrders OrderDeclined[]
  sentMessages    Message[] @relation("SentMessages")
  readMessages    MessageRead[]
}


// Профиль исполнителя
model ExecutorProfile {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  city   String

  user User @relation(fields: [userId], references: [id])
}

// Профиль заказчика
model CustomerProfile {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  name    String?
  address String?

  user User @relation(fields: [userId], references: [id])
}

// Профиль админа
model AdminProfile {
    id    Int     @id @default(autoincrement())
    userId Int @unique
    recoveryCode String

    user User @relation(fields: [userId], references: [id])
}

// Код для подтверждения почты
model VerificationCode {
    id        Int      @id @default(autoincrement())
    code      String
    expiresAt DateTime
    userId    Int      @unique
    user      User     @relation(fields: [userId], references: [id])
}

// Услуги
model Service {
  id       Int    @id @default(autoincrement())
  name     String
  priority Int    @default(100)

  orders Order[]
}

model Order {
  id         Int       @id @default(autoincrement())
  customerId Int
  executorId Int?      // null — пока не назначен
  serviceId  Int

  // Основные данные
  objectType  String   // Тип объекта ()
  comment     String?  // Дополнительный комментарий

  // Характеристики септика
  distanceToSeptic       Float    // Расстояние до септика от подъезда
  septicDepth            Float    // Глубина септика до дна
  septicVolume           Float    // Объём септика
  septicConstructionType String   // Вид сооружения

  // Рабочие поля
  report      String?     // Отчёт исполнителя
  paymentMethod String    // Форма оплаты (наличные, карта, перевод)
  workDate    DateTime    // Дата выполнения работ
  status      OrderStatus @default(PENDING)
  priority    Int         @default(100)

  // Таймстампы
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Связи
  declinedBy OrderDeclined[]
  customer   User    @relation("CustomerOrders", fields: [customerId], references: [id])
  executor   User?   @relation("ExecutorOrders", fields: [executorId], references: [id])
  service    Service @relation(fields: [serviceId], references: [id])
  review     Review?
  chat       Chat?

  // Индексы
  @@index([status])
  @@index([priority])
  @@index([workDate])
}

// Отзывы к заказам
model Review {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique // 1 заказ = 1 отзыв
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

model Favorite {
  id         Int @id @default(autoincrement())
  customerId Int
  executorId Int

  customer User @relation("FavoriteCustomer", fields: [customerId], references: [id])
  executor User @relation("FavoriteExecutor", fields: [executorId], references: [id])

  @@unique([customerId, executorId]) // нельзя добавить одного и того же дважды
}

model OrderDeclined {
  id         Int @id @default(autoincrement())
  orderId    Int
  executorId Int

  order    Order @relation(fields: [orderId], references: [id])
  executor User  @relation(fields: [executorId], references: [id])

  @@unique([orderId, executorId]) // один исполнитель может отклонить один заказ один раз
}


model Chat {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  order     Order    @relation(fields: [orderId], references: [id])
  messages  Message[]
  createdAt DateTime @default(now())
}


model Message {
  id        Int        @id @default(autoincrement())
  chatId    Int
  senderId  Int
  content   String?
  fileUrl   String?
  createdAt DateTime   @default(now())

  chat   Chat   @relation(fields: [chatId], references: [id])
  sender User   @relation("SentMessages", fields: [senderId], references: [id])
  reads  MessageRead[]
}

model MessageRead {
  id        Int @id @default(autoincrement())
  messageId Int
  userId    Int

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
}