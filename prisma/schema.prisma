generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  EXECUTOR
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  REJECTED
  COMPLETED
  CANCELLED
}

enum AccountStatus {
  UNVERIFIED
  VERIFIED
  DELETED
  BANNED
}

enum FileType {
  DOCUMENT
  PICTURE
  OTHER
  REPORT_FILE
  PROFILE_PHOTO
  REGISTRATION_CERTIFICATE
  LICENSE
}

enum WorkFormat {
  INDIVIDUAL     // частное лицо
  LEGAL_ENTITY   // юридическое лицо
  SOLE_PROPRIETOR // ИП
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  password       String
  phone          String?
  firstName      String?
  lastName       String?
  role           Role

  status         AccountStatus @default(UNVERIFIED)
  statusUpdatedAt DateTime     @default(now())

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  executorProfile ExecutorProfile?
  customerProfile CustomerProfile?
  adminProfile    AdminProfile?

  reviewsGiven    Review[]    @relation("ReviewAuthor")
  reviewsReceived Review[]    @relation("ReviewTarget")
  emailVerification EmailVerification?
}

model AdminProfile {
  id           String @id @default(uuid())
  userId       String @unique
  recoveryCode String?

  user         User   @relation(fields: [userId], references: [id])
}

model CustomerProfile {
  id         String    @id @default(uuid())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id])

  orders     Order[]
  addresses  Address[]
}

model ExecutorProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])

  workFormat       String
  experience       Int?     
  about            String?

  companyName      String?
  description      String?
  rating           Float?   @default(0.0)
  completedOrders  Int      @default(0)

  orders           Order[]
  files            File[]
}


model File {
  id          String   @id @default(uuid())
  userId      String
  user        ExecutorProfile @relation(fields: [userId], references: [id])
  reportId    String?
  report      Report?  @relation(name: "ReportFiles", fields: [reportId], references: [id])

  url         String
  filename    String
  mimetype    String
  type        FileType
  size        Int?     // размер файла в байтах
  uploadedAt  DateTime @default(now())
}

model Order {
  id           String      @id @default(uuid())

  title       String      @default("")
  objectType  String
  comment     String?

  distanceToSeptic       Float
  septicDepth            Float
  septicVolume           Float
  septicConstructionType String

  report      String?
  paymentMethod String
  workDate    DateTime
  status      OrderStatus @default(PENDING)
  priority    Int         @default(100)
  price       Float?

  addressId   String?
  address     Address?    @relation(fields: [addressId], references: [id])

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  customerId  String
  executorId  String?

  customer    CustomerProfile @relation(fields: [customerId], references: [id])
  executor    ExecutorProfile? @relation(fields: [executorId], references: [id])

  service     Service?
  reports     Report[]
  reviews     Review[]
}

model Service {
  id       String   @id @default(uuid())
  name     String
  priority Int      @default(100)

  orderId  String   @unique
  order    Order    @relation(fields: [orderId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  text       String
  rating     Int
  createdAt  DateTime @default(now())

  authorId   String
  targetId   String
  orderId    String?

  author     User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  target     User     @relation("ReviewTarget", fields: [targetId], references: [id])
  order      Order?   @relation(fields: [orderId], references: [id])
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  user         CustomerProfile @relation(fields: [userId], references: [id])

  value        String
  city         String?
  postalCode   String?
  coordinates  String?

  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())

  orders       Order[]
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        String   @id @default(uuid())
  text      String?
  files     File[]   @relation("ReportFiles")
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
}