generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  EXECUTOR
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  REJECTED
  COMPLETED
  CANCELLED
}

enum AccountStatus {
  UNVERIFIED
  VERIFIED
  DELETED
  BANNED
}

enum FileType {
  DOCUMENT
  PICTURE
  OTHER
  REPORT_FILE
  PROFILE_PHOTO
  REGISTRATION_CERTIFICATE
  LICENSE
}

enum WorkFormat {
  INDIVIDUAL
  LEGAL_ENTITY
  SOLE_PROPRIETOR
}

enum ChatType {
  GENERAL
  ORDER_CUSTOMER
  ORDER_ADMIN
  SUPPORT_CUSTOMER
  SUPPORT_EXECUTOR
}

model User {
  id               Int           @id @default(autoincrement())
  email            String           @unique
  password         String
  phone            String?
  firstName        String?
  lastName         String?
  role             Role
  status           AccountStatus    @default(UNVERIFIED)
  statusUpdatedAt  DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  priority         Int              @default(100)

  executorProfile  ExecutorProfile?
  customerProfile  CustomerProfile?
  adminProfile     AdminProfile?

  reviewsGiven     Review[]         @relation("ReviewAuthor")
  reviewsReceived  Review[]         @relation("ReviewTarget")
  emailVerification EmailVerification?
  files            File[]
  messages         Message[]
  chatParticipants ChatParticipant[]
}

model AdminProfile {
  id               Int           @id @default(autoincrement())
  userId       Int @unique
  recoveryCode String?

  user         User   @relation(fields: [userId], references: [id])
}

model CustomerProfile {
  id               Int           @id @default(autoincrement())
  userId     Int    @unique
  user       User      @relation(fields: [userId], references: [id])
  priority         Int              @default(100)

  orders     Order[]
  addresses  Address[]
  favorites  Favorite[] @relation("CustomerFavorites")
}

model ExecutorProfile {
  id               Int           @id @default(autoincrement())
  userId           Int   @unique
  user             User     @relation(fields: [userId], references: [id])
  priority         Int              @default(100)

  workFormat       WorkFormat
  experience       Int?
  about            String?

  companyName      String?
  description      String?
  city             String?
  rating           Float?   @default(0.0)
  completedOrders  Int      @default(0)

  orders           Order[]
  files            File[]
  favorites        Favorite[] @relation("ExecutorFavorites")
}

model Favorite {
  id               Int           @id @default(autoincrement())
  customerId  Int
  executorId  Int
  createdAt   DateTime @default(now())

  customer    CustomerProfile @relation("CustomerFavorites", fields: [customerId], references: [id])
  executor    ExecutorProfile @relation("ExecutorFavorites", fields: [executorId], references: [id])

  @@unique([customerId, executorId])
}


model File {
  id               Int           @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  executorId  Int?
  executor    ExecutorProfile? @relation(fields: [executorId], references: [id])

  reportId    Int?
  report      Report?  @relation(name: "ReportFiles", fields: [reportId], references: [id])

  messageId   Int?
  message     Message? @relation(fields: [messageId], references: [id])

  url         String
  filename    String
  mimetype    String
  type        FileType
  size        Int?
  uploadedAt  DateTime @default(now())
}

model Order {
  id               Int           @id @default(autoincrement())

  title        String      @default("")
  objectType   String
  comment      String?

  distanceToSeptic       Float
  septicDepth            Float
  septicVolume           Float
  septicConstructionType String

  paymentMethod String
  workDate      DateTime
  status        OrderStatus @default(PENDING)
  priority      Int         @default(100)
  price         Float?

  addressId     Int?
  address       Address?    @relation(fields: [addressId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  customerId    Int
  executorId    Int?

  customer      CustomerProfile @relation(fields: [customerId], references: [id])
  executor      ExecutorProfile? @relation(fields: [executorId], references: [id])

  serviceId     Int?
  service       Service?   @relation(fields: [serviceId], references: [id])

  reports       Report[]
  reviews       Review[]
  chats         Chat[]
}

model Service {
  id               Int           @id @default(autoincrement())
  name     String
  priority Int      @default(100)

  createdAt DateTime    @default(now())

  orders   Order[]
}

model Review {
  id               Int           @id @default(autoincrement())
  text       String
  rating     Int
  createdAt  DateTime @default(now())

  authorId   Int
  targetId   Int
  orderId    Int?

  author     User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  target     User     @relation("ReviewTarget", fields: [targetId], references: [id])
  order      Order?   @relation(fields: [orderId], references: [id])
}

model Address {
  id               Int           @id @default(autoincrement())
  userId       Int
  user         CustomerProfile @relation(fields: [userId], references: [id])

  value        String
  city         String?
  postalCode   String?
  coordinates  String?

  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())

  orders       Order[]
}

model EmailVerification {
  id               Int           @id @default(autoincrement())
  userId    Int   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id               Int           @id @default(autoincrement())
  text      String?
  files     File[]   @relation("ReportFiles")
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
}

model Chat {
  id               Int           @id @default(autoincrement())
  orderId     Int?
  order       Order?   @relation(fields: [orderId], references: [id])
  type        ChatType @default(GENERAL)
  createdAt   DateTime @default(now())

  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id               Int           @id @default(autoincrement())
  chatId    Int
  userId    Int

  user      User     @relation(fields: [userId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@unique([chatId, userId])
}

model Message {
  id               Int           @id @default(autoincrement())
  chatId     Int
  senderId   Int
  text       String?
  createdAt  DateTime @default(now())

  chat       Chat     @relation(fields: [chatId], references: [id])
  sender     User     @relation(fields: [senderId], references: [id])
  files      File[]
}
