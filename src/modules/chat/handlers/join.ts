import {Socket} from 'socket.io';
import {prisma} from '../../../db/prisma';

export async function handleJoin(
    socket: Socket,
    userId: number,
    orderId: number
) {
    const order = await prisma.order.findUnique({
        where: {id: orderId},
    });

    if (!order || ![order.customerId, order.executorId].includes(userId)) {
        return socket.emit('error', {message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É'});
    }

    // –°–æ–∑–¥–∞—ë–º —á–∞—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const chat = await prisma.chat.upsert({
        where: {orderId},
        update: {},
        create: {orderId},
    });

    socket.join(`chat:${chat.id}`);
    console.log(`üì• user ${userId} –≤–æ—à—ë–ª –≤ —á–∞—Ç ${chat.id}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const messages = await prisma.message.findMany({
        where: {chatId: chat.id},
        orderBy: {createdAt: 'asc'},
        include: {
            reads: true,
        },
    });

    socket.emit('chat:history', messages);
}
